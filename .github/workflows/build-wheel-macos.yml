# (C) Copyright 2024- ECMWF.
#
# This software is licensed under the terms of the Apache Licence Version 2.0
# which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
# In applying this licence, ECMWF does not waive the privileges and immunities
# granted to it by virtue of its status as an intergovernmental organisation
# nor does it submit to any jurisdiction.


name: Build Python Wheel for MacOS

on:
  # Trigger the workflow manually
  workflow_dispatch:
    inputs:
      use_test_pypi:
        description: Use test pypi instead of the regular one
        required: false
        type: boolean
        default: false

  # Allow to be called from another workflow -- eg `cd.yml`
  workflow_call:
    inputs:
      use_test_pypi:
        description: Use test pypi instead of the regular one
        required: false
        type: boolean
        default: false

jobs:
  build:
    name: Build macos wheel
    strategy:
      fail-fast: true
      matrix:
        arch_type: [ARM64, X64]
        python_version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    runs-on: [self-hosted, macOS, "${{ matrix.arch_type }}"]
    steps:
      - run: if [ -z "$(which uv)" ] ; then curl -LsSf https://astral.sh/uv/install.sh | sh ; fi
      - uses: actions/checkout@v4
        with:
          repository: ecmwf/ci-utils
          ref: 1.latest
          path: ci-utils
          token: ${{ secrets.GH_REPO_READ_TOKEN }}
      - run: |
          set -euo pipefail
          git clone --depth=1 --branch="${GITHUB_REF#refs/heads/}" https://github.com/$GITHUB_REPOSITORY ./eccodes-python
          cd ./eccodes-python
          if [ "$GITHUB_REF_NAME" != "main" -a "$GITHUB_REF_NAME" != "master" -a "$GITHUB_REF_TYPE" != "tag" ] ; then
            export UV_CACHE_DIR="/tmp/reallynocache"
            rm -rf $UV_CACHE_DIR && mkdir $UV_CACHE_DIR
            EXTRA_PIP="--refresh --no-cache --prerelease=allow"
          else
            EXTRA_PIP=""
          fi

          VENV_ROOT=/tmp/buildvenv
          uv python install python"${{ matrix.python_version }}"
          # NOTE twine version forced due to metadata issue, cf wheelmaker Dockerfile
          rm -rf $VENV_ROOT && uv venv --python python"${{ matrix.python_version }}" $VENV_ROOT && source $VENV_ROOT/bin/activate && uv pip install build twine==6.0.1 delocate setuptools requests

          uv pip install $EXTRA_PIP eccodeslib
          EL_ROOT=$VENV_ROOT/lib/python"${{ matrix.python_version }}"/site-packages/eccodeslib
          export LIBDIR=$EL_ROOT/lib
          export INCDIR=$EL_ROOT/include
          python -m build --no-isolation .

          uv pip install $EXTRA_PIP ./dist/*whl pytest
          cd tests
          ECCODES_PYTHON_TRACE_LIB_SEARCH=1 pytest -v -s
          cd ..

          if [ "${{ inputs.use_test_pypi }}" = "true" ] ; then UPLOAD_TO=test ; else UPLOAD_TO=prod ; fi
          BUILDSCRIPTS=$GITHUB_WORKSPACE/ci-utils/wheelmaker/buildscripts
          PYTHONPATH=$BUILDSCRIPTS $BUILDSCRIPTS/upload-pypi.sh $UPLOAD_TO ./dist
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD_PROD: ${{ secrets.PYPI_API_TOKEN }}
          TWINE_PASSWORD_TEST: ${{ secrets.PYPI_TEST_API_TOKEN }}
